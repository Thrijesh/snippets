import React, { useState, useRef, useEffect } from "react";
import axios from "axios";
import './doc.scss'
import {
    CBadge,
    CButton,
    CCol,
    CForm,
    CLabel,
    CFormGroup,
    CInputFile,
    CProgress,
    CSelect,
    CRow
} from "@coreui/react";
import Compress from "react-image-file-resizer";

function DocumentSubmission() {

    // const [ docType, setDocType ] = useState('AdhaarCard')
    // const [ multiDocType, setMultiDocType ] = useState('AdhaarOfParents')
    const [doc, setDoc] = useState()
    // const [ multiDoc, setMultiDoc ] = useState([])
    const [student, setStudent] = useState("60ccb9f8b5b8e9190811a9cc")
    const [adhaar, setAdhaar] = useState()
    const [casteCertificate, setCasteCertificate] = useState()
    const [bankPassbook, setBankPassbook] = useState()
    const [incomeCertificate, setIncomeCertificate] = useState()
    const [adhaarOfParents, setAdhaarOfParents] = useState()
    const [SSCAndHSCMarksCards, setSSCAndHSCMarksCards] = useState()
    const [sportsRelatedDocs, setSportsRelatedDocs] = useState()
    const [feeReceipt, setFeeReceipt] = useState()
    const [otherDocs, setOtherDocs] = useState()
    const [progress, setProgress] = useState(0)
    const [loading, setLoading] = useState(false)
    const [adhaarLoading, setAdhaarLoading] = useState(false)
    const [casteCertificateLoading, setCasteCertificateLoading] = useState(false)
    const [bankPassbookLoading, setBankPassbookLoading] = useState(false)
    const [incomeCertificateLoading, setIncomeCertificateLoading] = useState(false)
    const [adhaarOfParentsLoading, setAdhaarOfParentsLoading] = useState(false)
    const [SSCAndHSCMarksCardsLoading, setSSCAndHSCMarksCardsLoading] = useState(false)
    const [sportsRelatedDocsLoading, setSportsRelatedDocsLoading] = useState(false)
    const [feeReceiptLoading, setFeeReceiptLoading] = useState(false)
    const [otherDocsLoading, setOtherDocsLoading] = useState(false)
    const [docStatus, setDocStatus] = useState()
    const [adhaarOfParentsPhotoOne, setAdhaarOfParentsPhotoOne] = useState()
    const [adhaarOfParentsphotoTwo, setAdhaarOfParentsPhotoTwo] = useState()
    const [SSCAndHSCMarksCardsPhotoOne, setSSCAndHSCMarksCardsPhotoOne] = useState()
    const [SSCAndHSCMarksCardsphotoTwo, setSSCAndHSCMarksCardsPhotoTwo] = useState()
    const [sportsDocPhotoOne, setSportsDocPhotoOne] = useState()
    const [sportsDocPhotoTwo, setSportsDocPhotoTwo] = useState()
    const [sportsDocPhotoThree, setSportsDocPhotoThree] = useState()
    const [feeName, setFeesName] = useState()
    const [otherDocName, setOtherDocName] = useState()
    
    // const [newDoc, setNewDoc] = useState()
    // const [newMulDoc, setNewMulDoc] = useState([])
    const ref = useRef();

    // const data = new FormData()

    // data.append('Document_type', docType)
    // data.append('singleDoc', doc)
    // data.append('student', student)


    // const multiData = new FormData()

    // if(multiDoc.length > 0) {
    //     for (let i = 0; i < multiDoc.length; i++) {
    //        multiData.append('multipleDocs', multiDoc[i])
    //     }
    // }

    // multiData.append('Document_type', multiDocType)

    // multiData.append('student', student)

    // const post = (e) => {
    //     e.preventDefault()
    //     axios.post(`http://localhost:5000/api/add-docs/single-doc`, data)
    // }

    // const postmulti = (e) => {
    //     e.preventDefault()
    //     axios.post(`http://localhost:5000/api/add-docs/multi-docs`, multiData)
    // }

    //console.log(data)
    // AdhaarCard","CasteCertificate", "BankPassbook", "IncomeCertificate AdhaarOfParents","SSCAndHSCMarksCards", "OthersDocs", "SportsRelatedDocs", "FeeReceipt


    console.log(progress)

    const redAdhaarOfParents = (e) => {
        e.preventDefault()
        setAdhaarOfParentsLoading(true)

        if (e.target.files.length > 2) {
            alert("Only Two Files are allowed to upload!")
            setAdhaarOfParentsLoading(false)
            return e.target.value = null
        } else {
            const fileOne = e.target.files[0]
            const fileTwo = e.target.files[1]
            if (fileOne !== undefined) {
                if (fileOne.size > 4000000) {
                    setAdhaarOfParentsLoading(false)
                    alert("File Size is too large. Maximum size is 4mb")
                    return e.target.value = null
                } else {
                    Compress.imageFileResizer(
                        fileOne,
                        1024,
                        768,
                        "WEBP",
                        96,
                        0,
                        (uri) => {
                            console.log(uri, "11111111111111111111111111111111111111111111111111111111111")
                            setAdhaarOfParentsPhotoOne(uri)
                            setAdhaarOfParentsLoading(false)
                        },
                        "blob"
                    );
                }
            }

            if (fileTwo !== undefined) {
                if (fileTwo.size > 4000000) {
                    setAdhaarOfParentsLoading(false)
                    alert("File Size is too large. Maximum size is 4mb")
                    return e.target.value = null
                } else {
                    setAdhaarOfParentsLoading(true)
                    Compress.imageFileResizer(
                        fileTwo,
                        1024,
                        768,
                        "WEBP",
                        96,
                        0,
                        (uri) => {
                            console.log(uri, '22222222222222222222222222222222222222222222222222')
                            setAdhaarOfParentsPhotoTwo(uri)
                            setAdhaarOfParentsLoading(false)
                        },
                        "blob"
                    );
                }
            }
        }
        if (!e.target.files.length) {
            setAdhaarOfParentsLoading(false)
        }
    }


    const redSSCAndHSCMarksCards = (e) => {
        e.preventDefault()
        setSSCAndHSCMarksCardsLoading(true)

        if (e.target.files.length > 2) {
            alert("Only Two Files are allowed to upload!")
            setSSCAndHSCMarksCardsLoading(false)
            return e.target.value = null
        } else {
            const fileOne = e.target.files[0]
            const fileTwo = e.target.files[1]
            if (fileOne !== undefined) {
                Compress.imageFileResizer(
                    fileOne,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri, "11111111111111111111111111111111111111111111111111111111111")
                        setSSCAndHSCMarksCardsPhotoOne(uri)
                        setSSCAndHSCMarksCardsLoading(false)
                    },
                    "blob"
                );
            }

            if (fileTwo !== undefined) {
                setSSCAndHSCMarksCardsLoading(true)
                Compress.imageFileResizer(
                    fileTwo,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri, '22222222222222222222222222222222222222222222222222')
                        setSSCAndHSCMarksCardsPhotoTwo(uri)
                        setSSCAndHSCMarksCardsLoading(false)
                    },
                    "blob"
                );
            }
        }
        if (!e.target.files.length) {
            setSSCAndHSCMarksCardsLoading(false)
        }
    }

    const redSportsRelatedDocs = (e) => {
        e.preventDefault()
        setSportsRelatedDocsLoading(true)

        if (e.target.files.length > 3) {
            alert("Only Three Files are allowed to upload!")
            setSportsRelatedDocsLoading(false)
            return e.target.value = null
        } else {
            const fileOne = e.target.files[0]
            const fileTwo = e.target.files[1]
            const fileThree = e.target.files[2]
            if (fileOne !== undefined) {
                Compress.imageFileResizer(
                    fileOne,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri, "11111111111111111111111111111111111111111111111111111111111")
                        setSportsDocPhotoOne(uri)
                        setSportsRelatedDocsLoading(false)
                    },
                    "blob"
                );
            }

            if (fileTwo !== undefined) {
                setSportsRelatedDocsLoading(true)
                Compress.imageFileResizer(
                    fileTwo,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri, '22222222222222222222222222222222222222222222222222')
                        setSportsDocPhotoTwo(uri)
                        setSportsRelatedDocsLoading(false)
                    },
                    "blob"
                );
            }

            if (fileThree !== undefined) {
                setSportsRelatedDocsLoading(true)
                Compress.imageFileResizer(
                    fileThree,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri, '33333333333333333333333333333333333')
                        setSportsDocPhotoThree(uri)
                        setSportsRelatedDocsLoading(false)
                    },
                    "blob"
                );
            }
        }
        if (!e.target.files.length) {
            setSportsRelatedDocsLoading(false)
        }
    }

    // const redAdhaarOfParents = async (e) => {
    //     e.preventDefault()
    //     setAdhaarOfParentsLoading(true)

    //     const file = e.target.files[0]
    //     if (file) {
    //         await Compress.imageFileResizer(
    //             file,
    //             660,
    //             780,
    //             "WEBP",
    //             90,
    //             0,
    //             (uri) => {
    //                 console.log(uri)
    //                 setAdhaarOfParents(uri)
    //                 setAdhaarOfParentsLoading(false)
    //             },
    //             "blob"
    //         );
    //     } else {
    //         setAdhaarOfParentsLoading(false)
    //     }
    // }
    // const redSSCAndHSCMarksCards = (e) => {
    //     e.preventDefault()
    //     setSSCAndHSCMarksCardsLoading(true)

    //     const file = e.target.files[0]
    //     if (file) {
    //         Compress.imageFileResizer(
    //             file,
    //             660,
    //             780,
    //             "WEBP",
    //             90,
    //             0,
    //             (uri) => {
    //                 setSSCAndHSCMarksCards(uri)
    //                 setSSCAndHSCMarksCardsLoading(false)
    //             },
    //             "blob"
    //         );
    //     } else {
    //         setSSCAndHSCMarksCardsLoading(false)
    //     }
    // }

    const postAdhaarOfParents = async (e) => {
        e.preventDefault()
        const data = new FormData()
        data.append('Document_type', "AdhaarOfParents")
        data.append('student', student)
        data.append('stud_regNo', "66")
        if (adhaarOfParentsPhotoOne !== undefined) {
            data.append('multipleDocs', adhaarOfParentsPhotoOne)
        }
        if (adhaarOfParentsphotoTwo !== undefined) {
            data.append('multipleDocs', adhaarOfParentsphotoTwo)
        }
        await axios.post(`http://localhost:5000/api/add-docs/multi-doc`, data)
            .then(res => {
                console.log(res.data)
                getDocStatus()
            })
            .catch(err => {
                console.log(err)
            })
        console.log(adhaarOfParentsPhotoOne)
        console.log(adhaarOfParentsphotoTwo)
    }

    const postSSCAndHSCMarksCards = async (e) => {
        e.preventDefault()
        const data = new FormData()
        data.append('Document_type', "SSCAndHSCMarksCards")
        data.append('student', student)
        data.append('stud_regNo', "66")
        if (SSCAndHSCMarksCardsPhotoOne !== undefined) {
            data.append('multipleDocs', SSCAndHSCMarksCardsPhotoOne)
        }
        if (SSCAndHSCMarksCardsphotoTwo !== undefined) {
            data.append('multipleDocs', SSCAndHSCMarksCardsphotoTwo)
        }
        await axios.post(`http://localhost:5000/api/add-docs/multi-doc`, data)
            .then(res => {
                console.log(res.data)
                getDocStatus()
            })
            .catch(err => {
                console.log(err)
            })
        console.log(SSCAndHSCMarksCardsPhotoOne)
        console.log(SSCAndHSCMarksCardsphotoTwo)
    }


    const postSportsRelatedDocs = async (e) => {
        e.preventDefault()
        const data = new FormData()
        data.append('Document_type', "SportsRelatedDocs")
        data.append('student', student)
        data.append('stud_regNo', "66")
        if (sportsDocPhotoOne !== undefined) {
            data.append('multipleDocs', sportsDocPhotoOne)
        }
        if (sportsDocPhotoTwo !== undefined) {
            data.append('multipleDocs', sportsDocPhotoTwo)
        }
        if (sportsDocPhotoThree !== undefined) {
            data.append('multipleDocs', sportsDocPhotoThree)
        }
        await axios.post(`http://localhost:5000/api/add-docs/multi-doc`, data)
            .then(res => {
                console.log(res.data)
                getDocStatus()
            })
            .catch(err => {
                console.log(err)
            })
        console.log(sportsDocPhotoOne)
        console.log(sportsDocPhotoTwo)
        console.log(sportsDocPhotoThree)
    }

    const redAdhaarCard = (e) => {
        e.preventDefault()
        setAdhaarLoading(true)

        const file = e.target.files[0]
        if (file) {
            if (file.size <= 4000000) {
                Compress.imageFileResizer(
                    file,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri)
                        setAdhaar(uri)
                        setAdhaarLoading(false)
                    },
                    "blob"
                );
            } else {
                alert("File is too Large to Upload. Maximum size is 4mb")
                setAdhaarLoading(false)
                return e.target.value = null
            }
        } else {
            setAdhaarLoading(false)
        }
    }

    const redCasteCertificate = (e) => {
        e.preventDefault()
        setCasteCertificateLoading(true)

        const file = e.target.files[0]
        if (file) {
            if (file.size <= 4000000) {
                Compress.imageFileResizer(
                    file,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri)
                        setCasteCertificate(uri)
                        setCasteCertificateLoading(false)
                    },
                    "blob"
                );
            } else {
                alert("File is too Large to Upload. Maximum size is 4mb")
                setCasteCertificateLoading(false)
                return e.target.value = null
            }
        } else {
            setCasteCertificateLoading(false)
        }
    }
    const redBankPassbook = (e) => {
        e.preventDefault()
        setBankPassbookLoading(true)
        const file = e.target.files[0]
        if (file) {
            if (file.size <= 4000000) {
                Compress.imageFileResizer(
                    file,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri)
                        setBankPassbook(uri)
                        setBankPassbookLoading(false)
                    },
                    "blob"
                );
            } else {
                alert("File is too Large to Upload. Maximum size is 4mb")
                setBankPassbookLoading(false)
                return e.target.value = null
            }
        } else {
            setBankPassbookLoading(false)
        }
    }
    const redIncomeCer = (e) => {
        e.preventDefault()
        setIncomeCertificateLoading(true)

        const file = e.target.files[0]
        if (file) {
            if (file.size <= 4000000) {
                Compress.imageFileResizer(
                    file,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri)
                        setIncomeCertificate(uri)
                        setIncomeCertificateLoading(false)
                    },
                    "blob"
                );
            } else {
                alert("File is too Large to Upload. Maximum size is 4mb")
                setIncomeCertificateLoading(false)
                return e.target.value = null
            }
        } else {
            setIncomeCertificateLoading(false)
        }
    }
    // const redSportsRelatedDocs = (e) => {
    //     e.preventDefault()
    //     setSportsRelatedDocsLoading(true)

    //     const file = e.target.files[0]
    //     if (file) {
    //         Compress.imageFileResizer(
    //             file,
    //             660,
    //             780,
    //             "WEBP",
    //             90,
    //             0,
    //             (uri) => {
    //                 setSportsRelatedDocs(uri)
    //                 setSportsRelatedDocsLoading(false)
    //             },
    //             "blob"
    //         )
    //     } else {
    //         setSportsRelatedDocsLoading(false)
    //     }
    // }
    const redFeeReceipt = (e) => {
        e.preventDefault()
        setFeeReceiptLoading(true)

        const file = e.target.files[0]
        if (file) {
            if (file.size <= 4000000) {
                Compress.imageFileResizer(
                    file,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        console.log(uri)
                        setFeeReceipt(uri)
                        setFeeReceiptLoading(false)
                    },
                    "blob"
                );
            } else {
                alert("File is too Large to Upload. Maximum size is 4mb")
                setFeeReceiptLoading(false)
                return e.target.value = null
            }
        } else {
            setFeeReceiptLoading(false)
        }
    }

    const redOtherDocs = (e) => {
        e.preventDefault()
        setOtherDocsLoading(true)

        const file = e.target.files[0]
        if (file) {
            if (file.size <= 4000000) {
                Compress.imageFileResizer(
                    file,
                    1024,
                    768,
                    "WEBP",
                    96,
                    0,
                    (uri) => {
                        setOtherDocs(uri)
                        setOtherDocsLoading(false)
                    },
                    "blob"
                )
            } else {
                alert("File is too Large to Upload. Maximum size is 4mb")
                setOtherDocsLoading(false)
                return e.target.value = null
            }
        } else {
            setOtherDocsLoading(false)
        }
    }

    const postAdhaarCard = (e) => {
        e.preventDefault()
        const data = new FormData()
        data.append('Document_type', "AdhaarCard")
        data.append('singleDoc', adhaar)
        data.append('student', student)
        data.append('stud_regNo', "66")
        axios.post(`http://localhost:5000/api/add-docs/single-doc`, data)
            .then(res => {
                console.log(res.data)
                getDocStatus()
            })
            .catch(err => {
                console.log(err)
            })
    }
    const postCasteCertificate = (e) => {
        e.preventDefault()
        const data = new FormData()
        data.append('Document_type', "CasteCertificate")
        data.append('singleDoc', casteCertificate)
        data.append('student', student)
        data.append('stud_regNo', "66")
        axios.post(`http://localhost:5000/api/add-docs/single-doc`, data)
            .then(res => {
                console.log(res.data)
                getDocStatus()
            })
            .catch(err => {
                console.log(err)
            })
    }
    const postBankPassbook = async (e) => {
        e.preventDefault()

        const data = new FormData()
        data.append('Document_type', "BankPassbook")
        data.append('singleDoc', bankPassbook)
        data.append('student', student)
        data.append('stud_regNo', "66")
        await axios.post(`http://localhost:5000/api/add-docs/single-doc`, data)
            .then(res => {
                console.log(res.data)
                getDocStatus()
            })
            .catch(err => {
                console.log(err)
            })
    }
    const postIncomeCertificate = async (e) => {
        e.preventDefault()
        const data = new FormData()
        data.append('Document_type', "IncomeCertificate")
        data.append('singleDoc', incomeCertificate)
        data.append('student', student)
        data.append('stud_regNo', "66")
        await axios.post(`http://localhost:5000/api/add-docs/single-doc`, data)
            .then(res => {
                console.log(res.data)
                getDocStatus()
            })
            .catch(err => {
                console.log(err)
            })
    }
    // const postAdhaarOfParents = async (e) => {
    //     e.preventDefault()
    //     let data = new FormData()
    //     data.append('Document_type', "AdhaarOfParents")
    //     data.append('student', student)
    //     data.append('stud_regNo', "66")
    //     data.append('multipleDocs', adhaarOfParents)
    //     await axios.post(`http://localhost:5000/api/add-docs/multi-docs`, data)
    // }
    // const postSSCAndHSCMarksCards = async (e) => {
    //     e.preventDefault()
    //     let data = new FormData()
    //     data.append('Document_type', "SSCAndHSCMarksCards")
    //     data.append('student', student)
    //     data.append('stud_regNo', "66")
    //     data.append('multipleDocs', SSCAndHSCMarksCards)
    //     await axios.post(`http://localhost:5000/api/add-docs/multi-docs`, data)
    //         .then(res => {
    //             console.log(res.data)
    //         })
    //         .catch(err => {
    //             console.log(err)
    //         })
    // }
    // const postSportsRelatedDocs = async (e) => {
    //     e.preventDefault()
    //     let data = new FormData()
    //     data.append('Document_type', "SportsRelatedDocs")
    //     data.append('student', student)
    //     data.append('stud_regNo', "66")
    //     data.append('multipleDocs', sportsRelatedDocs)
    //     await axios.post(`http://localhost:5000/api/add-docs/multi-docs`, data)
    // }
    // const postFeeReceipt(old) = (e) => {
    //     e.preventDefault()
    //     const data = new FormData()
    //     data.append('Document_type', "FeeReceipt")
    //     data.append('student', student)
    //     data.append('fee', feeReceipt)
    //     data.append('stud_regNo', "66")

    //     const options = {
    //         onUploadProgress: (progressEvent) => {
    //             const { loaded, total } = progressEvent
    //             let percent = Math.floor((loaded * 100) / total)
    //             console.log(`${loaded}kb of ${total}kb | ${percent}%`)
    //             setProgress(percent)
    //         }
    //     }
    //     setLoading(true)
    //     axios.post(`http://localhost:5000/api/add-docs/fee-recipt`, data, options)
    //         .then(res => {
    //             console.log(res.data)
    //             setLoading(false)
    //             getDocStatus()
    //         })
    //         .catch(err => {
    //             console.log(err)
    //             setLoading(false)
    //         })
    //     // onUploadProgress(e)
    // }
    // const postOtherDocs = (e) => {
    //     e.preventDefault()
    //     const data = new FormData()
    //     data.append('Document_type', "OtherDocs")
    //     data.append('student', student)
    //     data.append('otherDocs', otherDocs)
    //     data.append('stud_regNo', "66")

    //     axios.post(`http://localhost:5000/api/add-docs/other-docs`, data)
    //         .then(res => {
    //             console.log(res.data)
    //             getDocStatus()
    //         })
    //         .catch(err => {
    //             console.log(err)
    //         })
    // }

    const getDocStatus = async () => {
        await axios.post(`http://localhost:5000/api/get-status`, { student_regNo: 66 })
            .then(res => {
                console.log(res.data)
                setDocStatus(res.data)
            })
            .catch(err => {
                console.log(err)
                setDocStatus(null)
            })
    }

    useEffect(() => {
        getDocStatus()
        console.log('USEEFFECT')
    }, [])

    // const onFileResize = e => {
    //     const file = e.target.files[0];

    //     Compress.imageFileResizer(
    //         file, // the file from input
    //         660, // width
    //         780, // height
    //         "WEBP", // compress format WEBP, JPEG, PNG
    //         90, // quality
    //         0, // rotation
    //         (uri) => {
    //             console.log(uri);
    //             setNewDoc(uri)
    //             // You upload logic goes here
    //         },
    //         "blob" // blob or base64 default base64
    //     );
    // }


    // const onFileResizeMulti = e => {
    //     e.preventDefault()

    //     if (adhaarOfParents.length > 0) {
    //         for (let i = 0; i < adhaarOfParents.length; i++) {
    //             Compress.imageFileResizer(
    //                 adhaarOfParents[i], // the file from input
    //                 660, // width
    //                 780, // height
    //                 "WEBP", // compress format WEBP, JPEG, PNG
    //                 90, // quality
    //                 0, // rotation
    //                 (uri) => {
    //                     console.log(uri)
    //                     // You upload logic goes here
    //                     var data = new FormData()
    //                     data.append('Document_type', "AdhaarOfParents")
    //                     data.append('student', student)
    //                     data.append('stud_regNo', "66")
    //                     data.append('multipleDocs', uri)
    //                     axios.post(`http://localhost:5000/api/add-docs/multi-docs`, data)
    //                 },
    //                 "blob" // blob or base64 default base64
    //             )
    //         }
    //     }
    // }

    const findAdhaarStatus = docStatus && docStatus.singleDocs.find(el => {
        return el.name === 'AdhaarCard'
    })

    const findCasteCertificateStatus = docStatus && docStatus.singleDocs.find(el => {
        return el.name === 'CasteCertificate'
    })

    const findBankPassbookStatus = docStatus && docStatus.singleDocs.find(el => {
        return el.name === 'BankPassbook'
    })

    const findIncomeCertificateStatus = docStatus && docStatus.singleDocs.find(el => {
        return el.name === 'IncomeCertificate'
    })

    const findAdhaarOfParentsStatus = docStatus && docStatus.multipleDocs.find(el => {
        return el.Document_type === 'AdhaarOfParents'
    })

    const findSSCAndHSCMarksCards = docStatus && docStatus.multipleDocs.find(el => {
        return el.Document_type === 'SSCAndHSCMarksCards'
    })

    const findSportsRelatedDocs = docStatus && docStatus.multipleDocs.find(el => {
        return el.Document_type === 'SportsRelatedDocs'
    })

    const findFeeReceipt_1 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-1'
    })

    const findFeeReceipt_2 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-2'
    })

    const findFeeReceipt_3 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-3'
    })

    const findFeeReceipt_4 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-4'
    })

    const findFeeReceipt_5 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-5'
    })

    const findFeeReceipt_6 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-6'
    })

    const findFeeReceipt_7 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-7'
    })

    const findFeeReceipt_8 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-8'
    })

    const findFeeReceipt_9 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-9'
    })
    const findFeeReceipt_10 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-10'
    })
    const findFeeReceipt_11 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-11'
    })
    const findFeeReceipt_12 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-12'
    })
    const findFeeReceipt_13 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-13'
    })
    const findFeeReceipt_14 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-14'
    })
    const findFeeReceipt_15 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-15'
    })
    const findFeeReceipt_16 = docStatus && docStatus.feeReceipt.find(el => {
        return el.name === 'FeeReceipt-16'
    })

    const findOtherDocs_1 = docStatus && docStatus.othersDocs.find(el => {
        return el.name === 'OtherDocs-1'
    })

    const findOtherDocs_2 = docStatus && docStatus.othersDocs.find(el => {
        return el.name === 'OtherDocs-2'
    })

    const findOtherDocs_3 = docStatus && docStatus.othersDocs.find(el => {
        return el.name === 'OtherDocs-3'
    })

    const findOtherDocs_4 = docStatus && docStatus.othersDocs.find(el => {
        return el.name === 'OtherDocs-4'
    })

    const findOtherDocs_5 = docStatus && docStatus.othersDocs.find(el => {
        return el.name === 'OtherDocs-5'
    })


    const postFeeReceipt = (e) => {
        e.preventDefault()
        const data = new FormData()
        data.append('Document_type', feeName)
        data.append('student', student)
        data.append('fee', feeReceipt)
        data.append('stud_regNo', "66")
        if (feeName) {
            axios.post(`http://localhost:5000/api/add-docs/fee-recipt`, data)
            .then(res => {
                console.log(res.data)
                getDocStatus()
            })
            .catch(err => {
                console.log(err)
            })
        } else {
            alert('Please select the Fee type')
        }
    }
    const postOtherDocs = (e) => {
        e.preventDefault()
        const data = new FormData()
        data.append('Document_type', otherDocName)
        data.append('student', student)
        data.append('otherDocs', otherDocs)
        data.append('stud_regNo', "66")

        if(otherDocName) {
            axios.post(`http://localhost:5000/api/add-docs/other-docs`, data)
                .then(res => {
                    console.log(res.data)
                    getDocStatus()
                })
                .catch(err => {
                    console.log(err)
                })
        } else {
            alert('Please select the Other Doc type')
        }
    }

    console.log(feeName)
    console.log(otherDocName)
    console.log(otherDocs)
    return (
        <>
            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postAdhaarCard(e)}>
                <header className="label_header">DOCUMENT SUBMISSION</header>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>ADHAAR CARD</strong></CLabel>
                    </CCol>
                    {
                        docStatus && docStatus !== null && findAdhaarStatus !== undefined ?
                            // docStatus && docStatus.singleDocs[0].rejected === true && docStatus.singleDocs[0].verified === true ?
                            findAdhaarStatus !== undefined && findAdhaarStatus.rejected === true && findAdhaarStatus.verified === true ?
                                <>
                                    <CCol xs="12" md="6">
                                        <div className="file">
                                            <CInputFile
                                                type="file"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onChange={(e) => redAdhaarCard(e)}
                                                required
                                            />
                                        </div>
                                    </CCol>
                                    <CCol xs="12" md="3">
                                        <CButton color="primary" type="submit" disabled={adhaarLoading}>{adhaarLoading ? "Resizing" : "Submit"}</CButton>
                                        {findAdhaarStatus.verified && findAdhaarStatus.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>AdhaarCard Rejected</CBadge> : null}
                                    </CCol>
                                </>
                                :
                                findAdhaarStatus.rejected === false && findAdhaarStatus.verified === false ?
                                    <CCol>
                                        <CBadge color="warning">Your Adhaar Document Approval is Pending</CBadge>
                                    </CCol>
                                    :
                                    <CCol>
                                        <CBadge color="success">Your Adhaar Document Has been Approved</CBadge>
                                    </CCol>
                            :
                            <>
                                <CCol xs="12" md="6">
                                    <div className="file">
                                        <CInputFile
                                            type="file"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onChange={(e) => redAdhaarCard(e)}
                                            required
                                        />
                                    </div>
                                </CCol>
                                <CCol xs="12" md="3">
                                    <CButton color="primary" type="submit" disabled={adhaarLoading}>{adhaarLoading ? "Resizing" : "Submit"}</CButton>
                                </CCol>
                            </>
                    }
                </CFormGroup>
            </CForm>

            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postCasteCertificate(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>CASTE CERTIFICATE</strong></CLabel>
                    </CCol>
                    {
                        docStatus && docStatus !== null && findCasteCertificateStatus !== undefined ?
                            findCasteCertificateStatus !== undefined && findCasteCertificateStatus && findCasteCertificateStatus.rejected === true && findCasteCertificateStatus && findCasteCertificateStatus.verified === true ?
                                <>
                                    <CCol xs="12" md="6">
                                        <div className="file">
                                            <CInputFile
                                                type="file"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onChange={(e) => redCasteCertificate(e)}
                                                required
                                            />
                                        </div>
                                    </CCol>
                                    <CCol xs="12" md="3">
                                        <CButton color="primary" type="submit" disabled={casteCertificateLoading}>{casteCertificateLoading ? "Resizing" : "Submit"}</CButton>
                                        {findCasteCertificateStatus && findCasteCertificateStatus.verified && findCasteCertificateStatus && findCasteCertificateStatus.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>CasteCertificate Rejected</CBadge> : null}
                                    </CCol>
                                </>
                                :
                                findCasteCertificateStatus.rejected === false && findCasteCertificateStatus.verified === false ?
                                    <CCol>
                                        <CBadge color="warning">Your Caste Certificate Document Approval is Pending</CBadge>
                                    </CCol>
                                    :
                                    <CCol>
                                        <CBadge color="success">Your Caste Certificate Document Has been Approved</CBadge>
                                    </CCol>
                            :
                            <>
                                <CCol xs="12" md="6">
                                    <div className="file">
                                        <CInputFile
                                            type="file"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onChange={(e) => redCasteCertificate(e)}
                                            required
                                        />
                                    </div>
                                </CCol>
                                <CCol xs="12" md="3">
                                    <CButton color="primary" type="submit" disabled={casteCertificateLoading}>{casteCertificateLoading ? "Resizing" : "Submit"}</CButton>
                                </CCol>
                            </>
                    }
                </CFormGroup>
            </CForm>

            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postBankPassbook(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>BANK PASSBOOK</strong></CLabel>
                    </CCol>
                    {
                        docStatus && docStatus !== null && findBankPassbookStatus !== undefined ?
                            findBankPassbookStatus !== undefined && findBankPassbookStatus && findBankPassbookStatus.rejected === true && findBankPassbookStatus && findBankPassbookStatus.verified === true ?
                                <>
                                    <CCol xs="12" md="6">
                                        <div className="file">
                                            <CInputFile
                                                type="file"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onChange={(e) => redBankPassbook(e)}
                                                required
                                            />
                                        </div>
                                    </CCol>
                                    <CCol xs="12" md="3">
                                        <CButton color="primary" type="submit" disabled={bankPassbookLoading}>{bankPassbookLoading ? "Resizing" : "Submit"}</CButton>
                                        {findBankPassbookStatus && findBankPassbookStatus.verified && findBankPassbookStatus && findBankPassbookStatus.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>BankPassbook Rejected</CBadge> : null}
                                    </CCol>
                                </>
                                :
                                findBankPassbookStatus.rejected === false && findBankPassbookStatus.verified === false ?
                                    <CCol xs="12" md="3">
                                        <CBadge color="warning">Your BankPassbook Document Approval is Pending</CBadge>
                                    </CCol>
                                    :
                                    <CCol xs="12" md="3">
                                        <CBadge color="success">Your BankPassbook Document Has been Approved</CBadge>
                                    </CCol>
                            :
                            <>
                                <CCol xs="12" md="6">
                                    <div className="file">
                                        <CInputFile
                                            type="file"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onChange={(e) => redBankPassbook(e)}
                                            required
                                        />
                                    </div>
                                </CCol>
                                <CCol xs="12" md="3">
                                    <CButton color="primary" type="submit" disabled={bankPassbookLoading}>{bankPassbookLoading ? "Resizing" : "Submit"}</CButton>
                                </CCol>
                            </>
                    }
                </CFormGroup>
            </CForm>

            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postIncomeCertificate(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>INCOME CERTIFICATE</strong></CLabel>
                    </CCol>
                    {
                        docStatus && docStatus !== null && findIncomeCertificateStatus !== undefined ?
                            findIncomeCertificateStatus !== undefined && findIncomeCertificateStatus.rejected === true && findIncomeCertificateStatus.verified === true ?
                                <>
                                    <CCol xs="12" md="6">
                                        <div className="file">
                                            <CInputFile
                                                type="file"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onChange={(e) => redIncomeCer(e)}
                                                required
                                            />
                                        </div>
                                    </CCol>
                                    <CCol xs="12" md="3">
                                        <CButton color="primary" type="submit" disabled={incomeCertificateLoading}>{incomeCertificateLoading ? "Resizing" : "Submit"}</CButton>
                                        {findIncomeCertificateStatus.verified && findIncomeCertificateStatus.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>Caste Certificate Rejected</CBadge> : null}
                                    </CCol>
                                </>
                                :
                                findIncomeCertificateStatus.rejected === false && findIncomeCertificateStatus.verified === false ?
                                    <CCol xs="12" md="3">
                                        <CBadge color="warning">Your Income Certificate Document Approval is Pending</CBadge>
                                    </CCol>
                                    :
                                    <CCol xs="12" md="3">
                                        <CBadge color="success">Your Income Certificate Document Has been Approved</CBadge>
                                    </CCol>
                            :
                            <>
                                <CCol xs="12" md="6">
                                    <div className="file">
                                        <CInputFile
                                            type="file"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onChange={(e) => redIncomeCer(e)}
                                            required
                                        />
                                    </div>
                                </CCol>
                                <CCol xs="12" md="3">
                                    <CButton color="primary" type="submit" disabled={incomeCertificateLoading}>{incomeCertificateLoading ? "Resizing" : "Submit"}</CButton>
                                </CCol>
                            </>
                    }
                </CFormGroup>
            </CForm>

            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postAdhaarOfParents(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>ADHAAR CARD OF PARENTS</strong></CLabel>
                        <CBadge color="info">Upload TWO files or Only One</CBadge>
                    </CCol>
                    {
                        docStatus && docStatus !== null && findAdhaarOfParentsStatus !== undefined ?
                            findAdhaarOfParentsStatus !== undefined && findAdhaarOfParentsStatus && findAdhaarOfParentsStatus.rejected === true && findAdhaarOfParentsStatus && findAdhaarOfParentsStatus.verified === true ?
                                <>
                                    <CCol xs="12" md="6">
                                        <div className="file">
                                            <CInputFile
                                                type="file"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onChange={(e) => redAdhaarOfParents(e)}
                                                required
                                                multiple
                                            />
                                        </div>
                                    </CCol>
                                    <CCol xs="12" md="3">
                                        <CButton color="primary" type="submit" disabled={adhaarOfParentsLoading}>{adhaarOfParentsLoading ? "Resizing" : "Submit"}</CButton>
                                        {findAdhaarOfParentsStatus && findAdhaarOfParentsStatus.verified && findAdhaarOfParentsStatus.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>Caste Certificate Rejected</CBadge> : null}
                                    </CCol>
                                </>
                                :
                                findAdhaarOfParentsStatus.rejected === false && findAdhaarOfParentsStatus.verified === false ?
                                    <CCol xs="12" md="3">
                                        <CBadge color="warning">Your Adhaar Parents Document Approval is Pending</CBadge>
                                    </CCol>
                                    :
                                    <CCol xs="12" md="3">
                                        <CBadge color="success">Your Adhaar Parents Document Has been Approved</CBadge>
                                    </CCol>
                            :
                            <>
                                <CCol xs="12" md="6">
                                    <div className="file">
                                        <CInputFile
                                            type="file"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onChange={(e) => redAdhaarOfParents(e)}
                                            required
                                            multiple
                                        />
                                    </div>
                                </CCol>
                                <CCol xs="12" md="3">
                                    <CButton color="primary" type="submit" disabled={adhaarOfParentsLoading}>{adhaarOfParentsLoading ? "Resizing" : "Submit"}</CButton>
                                    {findAdhaarOfParentsStatus && findAdhaarOfParentsStatus.verified && findAdhaarOfParentsStatus.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>Caste Certificate Rejected</CBadge> : null}
                                </CCol>
                            </>
                    }
                </CFormGroup>
            </CForm>

            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postSSCAndHSCMarksCards(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>SSC And HSC MarksCards</strong></CLabel>
                        <CBadge color="info">Required both documents</CBadge>
                    </CCol>
                    {
                        docStatus && docStatus !== null && findSSCAndHSCMarksCards !== undefined ?
                            findSSCAndHSCMarksCards !== undefined && findSSCAndHSCMarksCards && findSSCAndHSCMarksCards.rejected === true && findSSCAndHSCMarksCards && findSSCAndHSCMarksCards.verified === true ?
                                <>
                                    <CCol xs="12" md="6">
                                        <div className="file">
                                            <CInputFile
                                                type="file"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onChange={(e) => redSSCAndHSCMarksCards(e)}
                                                required
                                                multiple
                                            />
                                        </div>
                                    </CCol>
                                    <CCol xs="12" md="3">
                                        <CButton color="primary" type="submit" disabled={SSCAndHSCMarksCardsLoading}>{SSCAndHSCMarksCardsLoading ? "Resizing" : "Submit"}</CButton>
                                        {findSSCAndHSCMarksCards && findSSCAndHSCMarksCards.verified && findSSCAndHSCMarksCards && findSSCAndHSCMarksCards.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>MarksCards Rejected</CBadge> : null}
                                    </CCol>
                                </>
                                :
                                findSSCAndHSCMarksCards.rejected === false && findSSCAndHSCMarksCards.verified === false ?
                                    <CCol xs="12" md="3">
                                        <CBadge color="warning">Your SSC And HSC MarksCards Document Approval is Pending</CBadge>
                                    </CCol>
                                    :
                                    <CCol xs="12" md="3">
                                        <CBadge color="success">Your SSC And HSC MarksCards Document Has been Approved</CBadge>
                                    </CCol>
                            :
                            <>
                                <CCol xs="12" md="6">
                                    <div className="file">
                                        <CInputFile
                                            type="file"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onChange={(e) => redSSCAndHSCMarksCards(e)}
                                            required
                                            multiple
                                        />
                                    </div>
                                </CCol>
                                <CCol xs="12" md="3">
                                    <CButton color="primary" type="submit" disabled={SSCAndHSCMarksCardsLoading}>{SSCAndHSCMarksCardsLoading ? "Resizing" : "Submit"}</CButton>
                                    {findSSCAndHSCMarksCards && findSSCAndHSCMarksCards.verified && findSSCAndHSCMarksCards && findSSCAndHSCMarksCards.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>Caste Certificate Rejected</CBadge> : null}
                                </CCol>
                            </>
                    }
                </CFormGroup>
            </CForm>

            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postSportsRelatedDocs(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>SPORTS RELATED DOCUMENTS</strong></CLabel>
                        <CBadge color="info">Ignore if there aren't any</CBadge>
                    </CCol>
                    {
                        docStatus && docStatus !== null && findSportsRelatedDocs !== undefined ?
                            findSportsRelatedDocs !== undefined && findSportsRelatedDocs && findSportsRelatedDocs.rejected === true && findSportsRelatedDocs && findSportsRelatedDocs.verified === true ?
                                <>
                                    <CCol xs="12" md="6">
                                        <div className="file">
                                            <CInputFile
                                                type="file"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onChange={(e) => redSportsRelatedDocs(e)}
                                                multiple
                                                required
                                            />
                                        </div>
                                    </CCol>
                                    <CCol xs="12" md="3">
                                        <CButton color="primary" type="submit" disabled={sportsRelatedDocsLoading}>{sportsRelatedDocsLoading ? "Resizing" : "Submit"}</CButton>
                                        {findSportsRelatedDocs && findSportsRelatedDocs.verified && findSportsRelatedDocs && findSportsRelatedDocs.rejected ? <CBadge color="danger" style={{ marginLeft: '.5rem' }}>Caste Certificate Rejected</CBadge> : null}
                                    </CCol>
                                </>
                                :
                                findSportsRelatedDocs.rejected === false && findSportsRelatedDocs.verified === false ?
                                    <CCol xs="12" md="3">
                                        <CBadge color="warning">Your Adhaar Parents Document Approval is Pending </CBadge>
                                    </CCol>
                                    :
                                    <CCol xs="12" md="3">
                                        <CBadge color="success">Your Sports Document Has been Approved</CBadge>
                                    </CCol>
                            :
                            <>
                                <CCol xs="12" md="6">
                                    <div className="file">
                                        <CInputFile
                                            type="file"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onChange={(e) => redSportsRelatedDocs(e)}
                                            multiple
                                            required
                                        />
                                    </div>
                                </CCol>
                                <CCol xs="12" md="3">
                                    <CButton color="primary" type="submit" disabled={sportsRelatedDocsLoading}>{sportsRelatedDocsLoading ? "Resizing" : "Submit"}</CButton>
                                </CCol>
                            </>
                    }
                </CFormGroup>
            </CForm>

            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postFeeReceipt(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>FEE DOCS</strong></CLabel>
                    </CCol>
                    <CCol xs="12" md="6">
                        <CSelect
                            custom size="md"
                            value={feeName}
                            onChange={(e) => setFeesName(e.target.value)}
                        >
                            <option value="">Please select one</option>
                            {
                                docStatus && docStatus !== null && findFeeReceipt_1 !== undefined ?
                                    findFeeReceipt_1 !== undefined && findFeeReceipt_1.rejected === true && findFeeReceipt_1.verified === true ?
                                        <option value="FeeReceipt-1" style={{ color: "#FFF", background: "red" }}>Fee One (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_1.rejected === false && findFeeReceipt_1.verified === false ?
                                            <option value="FeeReceipt-1" style={{ color: "#FFF", background: "orange" }} disabled>Fee One Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-1" style={{ color: "#FFF", background: "green" }} disabled>Fee One Approved</option>
                                    :
                                    <option value="FeeReceipt-1">Fee One</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_2 !== undefined ?
                                    findFeeReceipt_2 !== undefined && findFeeReceipt_2.rejected === true && findFeeReceipt_2.verified === true ?
                                        <option value="FeeReceipt-2" style={{ color: "#FFF", background: "red" }}>Fee Two (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_2.rejected === false && findFeeReceipt_2.verified === false ?
                                            <option value="FeeReceipt-2" style={{ color: "#FFF", background: "orange" }} disabled>Fee Two Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-2" style={{ color: "#FFF", background: "green" }} disabled>Fee Two Approved</option>
                                    :
                                    <option value="FeeReceipt-2">Fee Two</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_3 !== undefined ?
                                    findFeeReceipt_3 !== undefined && findFeeReceipt_3.rejected === true && findFeeReceipt_3.verified === true ?
                                        <option value="FeeReceipt-3" style={{ color: "#FFF", background: "red" }}>Fee Three (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_3.rejected === false && findFeeReceipt_3.verified === false ?
                                            <option value="FeeReceipt-3" style={{ color: "#FFF", background: "orange" }} disabled>Fee Three Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-3" style={{ color: "#FFF", background: "green" }} disabled>Fee Three Approved</option>
                                    :
                                    <option value="FeeReceipt-3">Fee Three</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_4 !== undefined ?
                                    findFeeReceipt_4 !== undefined && findFeeReceipt_4.rejected === true && findFeeReceipt_4.verified === true ?
                                        <option value="FeeReceipt-4" style={{ color: "#FFF", background: "red" }}>Fee Four (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_4.rejected === false && findFeeReceipt_4.verified === false ?
                                            <option value="FeeReceipt-4" style={{ color: "#FFF", background: "orange" }} disabled>Fee Four Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-4" style={{ color: "#FFF", background: "green" }} disabled>Fee Four Approved</option>
                                    :
                                    <option value="FeeReceipt-4">Fee Four</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_5 !== undefined ?
                                    findFeeReceipt_5 !== undefined && findFeeReceipt_5.rejected === true && findFeeReceipt_5.verified === true ?
                                        <option value="FeeReceipt-5" style={{ color: "#FFF", background: "red" }}>Fee Five (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_5.rejected === false && findFeeReceipt_5.verified === false ?
                                            <option value="FeeReceipt-5" style={{ color: "#FFF", background: "orange" }} disabled>Fee Five Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-5" style={{ color: "#FFF", background: "green" }} disabled>Fee Five Approved</option>
                                    :
                                    <option value="FeeReceipt-5">Fee Five</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_6 !== undefined ?
                                    findFeeReceipt_6 !== undefined && findFeeReceipt_6.rejected === true && findFeeReceipt_6.verified === true ?
                                        <option value="FeeReceipt-6" style={{ color: "#FFF", background: "red" }}>Fee Six (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_6.rejected === false && findFeeReceipt_6.verified === false ?
                                            <option value="FeeReceipt-6" style={{ color: "#FFF", background: "orange" }} disabled>Fee Six Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-6" style={{ color: "#FFF", background: "green" }} disabled>Fee Six Approved</option>
                                    :
                                    <option value="FeeReceipt-6">Fee Six</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_7 !== undefined ?
                                    findFeeReceipt_7 !== undefined && findFeeReceipt_7.rejected === true && findFeeReceipt_7.verified === true ?
                                        <option value="FeeReceipt-7" style={{ color: "#FFF", background: "red" }}>Fee Seven (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_7.rejected === false && findFeeReceipt_7.verified === false ?
                                            <option value="FeeReceipt-7" style={{ color: "#FFF", background: "orange" }} disabled>Fee Seven Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-7" style={{ color: "#FFF", background: "green" }} disabled>Fee Seven Approved</option>
                                    :
                                    <option value="FeeReceipt-7">Fee Seven</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_8 !== undefined ?
                                    findFeeReceipt_8 !== undefined && findFeeReceipt_8.rejected === true && findFeeReceipt_8.verified === true ?
                                        <option value="FeeReceipt-8" style={{ color: "#FFF", background: "red" }}>Fee Eight (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_8.rejected === false && findFeeReceipt_8.verified === false ?
                                            <option value="FeeReceipt-8" style={{ color: "#FFF", background: "orange" }} disabled>Fee Eight Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-8" style={{ color: "#FFF", background: "green" }} disabled>Fee Eight Approved</option>
                                    :
                                    <option value="FeeReceipt-8">Fee Eight</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_9 !== undefined ?
                                    findFeeReceipt_9 !== undefined && findFeeReceipt_9.rejected === true && findFeeReceipt_9.verified === true ?
                                        <option value="FeeReceipt-9" style={{ color: "#FFF", background: "red" }}>Fee Nine (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_9.rejected === false && findFeeReceipt_9.verified === false ?
                                            <option value="FeeReceipt-9" style={{ color: "#FFF", background: "orange" }} disabled>Fee Nine Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-9" style={{ color: "#FFF", background: "green" }} disabled>Fee Nine Approved</option>
                                    :
                                    <option value="FeeReceipt-9">Fee Nine</option>
                            }
                            {
                                docStatus && docStatus !== null && findFeeReceipt_10 !== undefined ?
                                    findFeeReceipt_10 !== undefined && findFeeReceipt_10.rejected === true && findFeeReceipt_10.verified === true ?
                                        <option value="FeeReceipt-10" style={{ color: "#FFF", background: "red" }}>Fee Ten (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findFeeReceipt_10.rejected === false && findFeeReceipt_10.verified === false ?
                                            <option value="FeeReceipt-10" style={{ color: "#FFF", background: "orange" }} disabled>Fee Ten Approval Pending</option>
                                            :
                                            <option value="FeeReceipt-10" style={{ color: "#FFF", background: "green" }} disabled>Fee Ten Approved</option>
                                    :
                                    <option value="FeeReceipt-10">Fee Ten</option>
                            }
                        </CSelect>
                    </CCol>
                </CFormGroup>

                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CBadge color="info">Upload whenever you pay the fee</CBadge>
                    </CCol>
                    <CCol xs="12" md="6">
                        <div className="file">
                            <CInputFile
                                type="file"
                                accept="image/png, image/jpeg, image/jpg"
                                onChange={(e) => redFeeReceipt(e)}
                                required
                            />
                        </div>
                    </CCol>
                    <CCol xs="12" md="3">
                        <CButton color="primary" type="submit" disabled={feeReceiptLoading}>{feeReceiptLoading ? "Resizing" : "Submit"}</CButton>
                    </CCol>
                </CFormGroup>
            </CForm>

            <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postOtherDocs(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>OTHER DOCS</strong></CLabel>
                    </CCol>
                    <CCol xs="12" md="6">
                        <CSelect
                            custom size="md"
                            value={feeName}
                            onChange={(e) => setOtherDocName(e.target.value)}
                        >
                            <option value="">Please select one</option>
                            {
                                docStatus && docStatus !== null && findOtherDocs_1 !== undefined ?
                                    findOtherDocs_1 !== undefined && findOtherDocs_1.rejected === true && findOtherDocs_1.verified === true ?
                                        <option value="OtherDocs-1" style={{ color: "#FFF", background: "red" }}>Other Doc One (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findOtherDocs_1.rejected === false && findOtherDocs_1.verified === false ?
                                            <option value="OtherDocs-1" style={{ color: "#FFF", background: "orange" }} disabled>Other Doc One Approval Pending</option>
                                            :
                                            <option value="OtherDocs-1" style={{ color: "#FFF", background: "green" }} disabled>Other Doc One Approved</option>
                                    :
                                    <option value="OtherDocs-1">Other Doc One</option>
                            }
                            {
                                docStatus && docStatus !== null && findOtherDocs_2 !== undefined ?
                                    findOtherDocs_2 !== undefined && findOtherDocs_2.rejected === true && findOtherDocs_2.verified === true ?
                                        <option value="OtherDocs-2" style={{ color: "#FFF", background: "red" }}>Other Doc Two (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findOtherDocs_2.rejected === false && findOtherDocs_2.verified === false ?
                                            <option value="OtherDocs-2" style={{ color: "#FFF", background: "orange" }} disabled>Other Doc Two Approval Pending</option>
                                            :
                                            <option value="OtherDocs-2" style={{ color: "#FFF", background: "green" }} disabled>Other Doc Two Approved</option>
                                    :
                                    <option value="OtherDocs-2">Other Doc Two</option>
                            }
                            {
                                docStatus && docStatus !== null && findOtherDocs_3 !== undefined ?
                                    findOtherDocs_3 !== undefined && findOtherDocs_3.rejected === true && findOtherDocs_3.verified === true ?
                                        <option value="OtherDocs-3" style={{ color: "#FFF", background: "red" }}>Other Doc Three (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findOtherDocs_3.rejected === false && findOtherDocs_3.verified === false ?
                                            <option value="OtherDocs-3" style={{ color: "#FFF", background: "orange" }} disabled>Other Doc Three Approval Pending</option>
                                            :
                                            <option value="OtherDocs-3" style={{ color: "#FFF", background: "green" }} disabled>Other Doc Three Approved</option>
                                    :
                                    <option value="OtherDocs-3">Other Doc Three</option>
                            }
                            {
                                docStatus && docStatus !== null && findOtherDocs_4 !== undefined ?
                                    findOtherDocs_4 !== undefined && findOtherDocs_4.rejected === true && findOtherDocs_4.verified === true ?
                                        <option value="OtherDocs-4" style={{ color: "#FFF", background: "red" }}>Other Doc Four (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findOtherDocs_4.rejected === false && findOtherDocs_4.verified === false ?
                                            <option value="OtherDocs-4" style={{ color: "#FFF", background: "orange" }} disabled>Other Doc Four Approval Pending</option>
                                            :
                                            <option value="OtherDocs-4" style={{ color: "#FFF", background: "green" }} disabled>Other Doc Four Approved</option>
                                    :
                                    <option value="OtherDocs-4">Other Doc Four</option>
                            }
                            {
                                docStatus && docStatus !== null && findOtherDocs_5 !== undefined ?
                                    findOtherDocs_5 !== undefined && findOtherDocs_5.rejected === true && findOtherDocs_5.verified === true ?
                                        <option value="OtherDocs-5" style={{ color: "#FFF", background: "red" }}>Other Doc Five (Rejected - Select this to Re-Upload File)</option>
                                        :
                                        findOtherDocs_5.rejected === false && findOtherDocs_5.verified === false ?
                                            <option value="OtherDocs-5" style={{ color: "#FFF", background: "orange" }} disabled>Other Doc Five Approval Pending</option>
                                            :
                                            <option value="OtherDocs-5" style={{ color: "#FFF", background: "green" }} disabled>Other Doc Five Approved</option>
                                    :
                                    <option value="OtherDocs-5">Other Doc Five</option>
                            }
                        </CSelect>
                    </CCol>
                </CFormGroup>

                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CBadge color="info">Upload If any nes</CBadge>
                    </CCol>
                    <CCol xs="12" md="6">
                        <div className="file">
                            <CInputFile
                                type="file"
                                accept="image/png, image/jpeg, image/jpg"
                                onChange={(e) => redOtherDocs(e)}
                                required
                            />
                        </div>
                    </CCol>
                    <CCol xs="12" md="3">
                        <CButton color="primary" type="submit" disabled={otherDocsLoading}>{otherDocsLoading ? "Resizing" : "Submit"}</CButton>
                    </CCol>
                </CFormGroup>
            </CForm>

            {/* {
                loading ?
                    <CProgress value={progress} showPercentage className="mb-3" /> :
                    <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postFeeReceipt(e)}>
                        <CFormGroup row>
                            <CCol xs="12" md="3">
                                <CLabel><strong>FEE RECEIPT</strong></CLabel>
                                <CBadge col color="info">Upload Fee Doc whenever you pay the fee</CBadge>
                            </CCol>
                            <CCol xs="12" md="6">
                                <div className="file">
                                    <CInputFile
                                        type="file"
                                        accept="image/png, image/jpeg, image/jpg"
                                        onChange={(e) => redFeeReceipt(e)}
                                        required
                                    />
                                </div>
                            </CCol>
                            <CCol xs="12" md="3">
                                <CButton color="primary" type="submit" disabled={feeReceiptLoading}>{feeReceiptLoading ? "Resizing" : "Submit"}</CButton>
                            </CCol>
                        </CFormGroup>
                    </CForm>
            } */}

            {/* <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postOtherDocs(e)}>
                <CFormGroup row>
                    <CCol xs="12" md="3">
                        <CLabel><strong>OTHER DOCUMENTS</strong></CLabel>
                    </CCol> */}
                    {/* <CBadge color="primary">Ignore if there aren't any</CBadge> */}
                    {/* <CCol xs="12" md="6">
                        <div className="file">
                            <CInputFile
                                type="file"
                                accept="image/png, image/jpeg, image/jpg"
                                onChange={(e) => redOtherDocs(e)}
                                required
                            />
                        </div>
                    </CCol>
                    <CCol xs="12" md="3">
                        <CButton color="primary" type="submit" disabled={otherDocsLoading}>{otherDocsLoading ? "Resizing" : "Submit"}</CButton>
                    </CCol>
                </CFormGroup>
            </CForm> */}

            {/* <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postmulti(e)}>
                <CBadge>UPLOAD MULTIPLE DOCS</CBadge>
                <CBadge color="primary">Please select multiple Files at a time</CBadge>
                <CSelect
                    custom
                    name="select"
                    id="select"
                    value={multiDocType}
                    onChange={(e) => {
                        setMultiDocType(e.target.value)
                        console.log(e.target.value)
                    }}
                >
                    <option value="AdhaarOfParents">Adhaar Of Parents</option>
                    <option value="SSCAndHSCMarksCards">SSC And HSC MarksCards (Both required at a same time)</option>
                    <option value="FeeReceipt">Fee Receipts</option>
                    <option value="OthersDocs">Other Documents</option>
                    <option value="SportsRelatedDocs">Sports Related Documents</option>
                </CSelect>
                <CCol xs="12" md="6">
                    <CInputFile
                        id="file-input"
                        name="file-input"
                        type="file"
                        accept="image/png, image/jpeg, image/jpg"
                        onChange={(e) => setMultiDoc(e.target.files)}
                        multiple
                        required
                    />
                </CCol>
                <CButton color="primary" type="submit">Submit</CButton>
            </CForm> */}


            {/* <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => post(e)}>
                            <CBadge>UPLOAD SINGLE DOCS</CBadge>
                            <CSelect
                                custom
                                name="select"
                                id="select"
                                value={docType}
                                onChange={(e) => {
                                  setDocType(e.target.value)
                                  console.log(e.target.value)
                                }}
                            >
                                <option value="AdhaarCard">Adhaar Card</option>
                                <option value="CasteCertificate">Caste Certificate</option>
                                <option value="BankPassbook">BankPassbook</option>
                                <option value="IncomeCertificate">IncomeCertificate</option>
                            </CSelect>
                            <CCol xs="12" md="6">
                                <CInputFile
                                    id="file-input"
                                    name="file-input"
                                    type="file"
                                    accept="image/png, image/jpeg, image/jpg"
                                    onChange={(e) => setDoc(e.target.files[0])}
                                    required
                                />
                            </CCol>
                            <CButton color="primary" type="submit">Submit</CButton>
                        </CForm> 
            
                        <CForm row className="form-horizontal" encType="multipart/form-data" onSubmit={(e) => postmulti(e)}>
                            <CBadge>UPLOAD MULTIPLE DOCS</CBadge>
                            <CBadge color="primary">Please select multiple Files at a time</CBadge>
                            <CSelect
                                custom
                                name="select"
                                id="select"
                                value={multiDocType}
                                onChange={(e) => {
                                  setMultiDocType(e.target.value)
                                  console.log(e.target.value)
                                }}
                            >
                                <option value="AdhaarOfParents">Adhaar Of Parents</option>
                                <option value="SSCAndHSCMarksCards">SSC And HSC MarksCards (Both required at a same time)</option>
                                <option value="FeeReceipt">Fee Receipts</option>
                                <option value="OthersDocs">Other Documents</option>
                                <option value="SportsRelatedDocs">Sports Related Documents</option>
                            </CSelect>
                            <CCol xs="12" md="6">
                                <CInputFile
                                    id="file-input"
                                    name="file-input"
                                    type="file"
                                    accept="image/png, image/jpeg, image/jpg"
                                    onChange={(e) => setMultiDoc(e.target.files)}
                                    multiple
                                    required
                                />
                            </CCol>
                            <CButton color="primary" type="submit">Submit</CButton>
                        </CForm>   */}
        </>
    )
}

export default DocumentSubmission
